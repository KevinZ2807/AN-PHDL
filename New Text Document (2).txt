#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <openssl/sha.h>

std::string generateSalt() {
    std::string salt = "";
    const char charset[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    const int saltLength = 16;
    srand(time(NULL));
    for (int i = 0; i < saltLength; i++) {
        salt += charset[rand() % (sizeof(charset) - 1)];
    }
    return salt;
}

std::string hashPassword(std::string password, std::string salt) {
    std::string hashedPassword = "";
    unsigned char hash[SHA_DIGEST_LENGTH];
    SHA_CTX shaContext;
    SHA1_Init(&shaContext);
    SHA1_Update(&shaContext, password.c_str(), password.length());
    SHA1_Update(&shaContext, salt.c_str(), salt.length());
    SHA1_Final(hash, &shaContext);
    for (int i = 0; i < SHA_DIGEST_LENGTH; i++) {
        char hex[3];
        sprintf(hex, "%02x", hash[i]);
        hashedPassword += hex;
    }
    return hashedPassword;
}

int main() {
    std::string password;
    std::cout << "Enter password: ";
    std::cin >> password;
    std::string salt = generateSalt();
    std::string hashedPassword = hashPassword(password, salt);
    std::cout << "Salt: " << salt << std::endl;
    std::cout << "Hashed Password: " << hashedPassword << std::endl;
    return 0;
}